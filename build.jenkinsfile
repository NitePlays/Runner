@Library('SharedLib') _

pipeline {
    agent {
        node { label 'oracle' }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
    }
    stages {        
        stage('Creates Docker Image') {
          steps{
                sh "pwd"
                sh "ls -la"
                sh "docker build -t song-runners ."
          }
        }
        
        
        stage('Push image to ECR') {
          steps{
            script {
                 withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS']]) {
                    sh "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/m3t0e0s9"
                    sh "docker tag song-runners:latest public.ecr.aws/m3t0e0s9/song-runners:latest"
                    sh "docker push public.ecr.aws/m3t0e0s9/song-runners:latest"
             }
            }
          }
        }
        
    }
}
